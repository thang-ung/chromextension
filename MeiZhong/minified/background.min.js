"use strict";import{Zhong}from"../js/czhong.js";let isActivated=!1;chrome.storage.sync.set({active:isActivated}),chrome.browserAction.getBadgeText({},result=>{result&&togglesSuspend({id:-1})});const __configDefault={showSimplify:!0,busyPage:!0,localStorageMemory:!1,ontoStorage:".",permitRemote:!1};let ctex,__options=window.__options={context:Object.assign(__configDefault,JSON.parse(localStorage.context||"{}"))};function resume(tabId){ctex||((ctex=new Zhong).clients={}),chrome.runtime.onConnect.addListener(inf=>inf),chrome.browserAction.setBadgeBackgroundColor({color:[0,128,200,255]}),chrome.browserAction.setBadgeText({text:"On"}),chrome.storage.sync.set({active:isActivated=!0})}function suspend(){chrome.storage.sync.set({active:isActivated=!1}),ctex=void 0,chrome.browserAction.setBadgeBackgroundColor({color:[0,0,0,0]}),chrome.browserAction.setBadgeText({text:""}),chrome.contextMenus.removeAll(),isActivated=!1}function togglesSuspend(currentTab){isActivated?suspend():resume(currentTab.id)}function iscount(o,zeroalt=0){return Object.values(o).filter(x=>x).length||zeroalt}function tally(c){if(__options.context.localStorageMemory){c="string"==typeof c?c.split(""):c;let co={};for(let g of c)co[g]=ctex._hots[g];chrome.storage.local.set(co)}}chrome.browserAction.onClicked.addListener(togglesSuspend),window.onchange=(evt,dat)=>{dat?tally(dat.toString()):(localStorage.context=JSON.stringify(__options.context),chrome.storage.sync.set({context:__options.context}))},chrome.runtime.onMessage.addListener(function(request,sender,response){switch(request.type){case"register":void 0===request.op?(ctex&&(delete ctex.clients[sender.tab.id],chrome.browserAction.setBadgeText({text:iscount(ctex.clients,"On").toString()})),response()):ctex&&isNaN(ctex.clients[sender.tab.id])?(ctex.clients[sender.tab.id]=request.op,chrome.browserAction.setBadgeText({text:iscount(ctex.clients,"On").toString()}),response(1)):response(0);break;case"state":ctex.clients[sender.tab.id]=request.state,chrome.browserAction.setBadgeText({text:iscount(ctex.clients,"On").toString()}),response();break;case"search":{let e;response(search(request.text));break}case"page":{let tiles;response(Zhong.pageOn(request.src,request.limitcount,request.isRadical));break}case"glyphRootNode":{let child=Zhong.glyphRootNodeEx(request.glyf),radical=child.parentNode.getAttribute("radical"),strokes=child.getAttribute("n");try{let exclus=["1","s"],realrad=Zhong.radicals.reduce((incur,curr)=>0===incur.length?curr.filter(x=>-1===exclus.indexOf(x.alt)&&x.radical.indexOf(radical)>=0):incur,[]);response(Object.assign({strokes:strokes},realrad[0]))}catch(err){console.log(err)}break}case"radicals":response(Zhong.radicals);break;case"strokes":response(Zhong.strokes.outerHTML);break;case"querySelectorAll":response(Zhong.querySelectorAll(request.selector));break;case"qu":request.qu?ctex.qu=request.qu:response(ctex.qu);break;case"hots":response(ctex.hots);break;case"hottops":response(ctex.hottops(request.k));break;case"shelves":ctex.shelves(),response();break;case"rank":response(),ctex.rank(request.glyph,request.radical);break;case"shelfup":response(ctex.shelfup(request.radical));break;case"onshelf":response(ctex.onshelf(request.indices));break;case"shelfLengths":response(ctex.shelfLengths(request.indices));break;case"rx":ctex.rx(request.force),response(void 0)}});